# Makefile.in generated by automake 1.6.3 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.


SHELL = /bin/bash

srcdir = .
top_srcdir = ..

prefix = /usr/local/splint
exec_prefix = ${prefix}

bindir = ${exec_prefix}/bin
sbindir = ${exec_prefix}/sbin
libexecdir = ${exec_prefix}/libexec
datadir = ${prefix}/share
sysconfdir = ${prefix}/etc
sharedstatedir = ${prefix}/com
localstatedir = ${prefix}/var
libdir = ${exec_prefix}/lib
infodir = ${prefix}/info
mandir = ${prefix}/man
includedir = ${prefix}/include
oldincludedir = /usr/include
pkgdatadir = $(datadir)/splint
pkglibdir = $(libdir)/splint
pkgincludedir = $(includedir)/splint
top_builddir = ..

ACLOCAL = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run aclocal-1.6
AUTOCONF = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run autoconf
AUTOMAKE = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run automake-1.6
AUTOHEADER = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run autoheader

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
INSTALL_PROGRAM = ${INSTALL}
INSTALL_DATA = ${INSTALL} -m 644
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_SCRIPT = ${INSTALL}
INSTALL_HEADER = $(INSTALL_DATA)
transform = s,x,x,
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_alias = 
build_triplet = x86_64-unknown-linux-gnu
host_alias = 
host_triplet = x86_64-unknown-linux-gnu
target_alias = 
target_triplet = x86_64-unknown-linux-gnu

EXEEXT = 
OBJEXT = o
PATH_SEPARATOR = :
AMTAR = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run tar
AWK = mawk
BISON = no
CAT = cat
CC = gcc
CP = cp
CPP = gcc -E
DEPDIR = .deps
DIFF = diff
GREP = grep
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LCLOBJ = $(lcl_OBJECTS)
LEX = ${SHELL} /home/mqq/Desktop/complier/splint-3.1.2/config/missing --run flex
LEXLIB = 
LEX_OUTPUT_ROOT = 
LN_S = ln -s
MV = mv
PACKAGE = splint
RM = rm
SED = sed
STRIP = 
VERSION = 3.1.2
am__include = include
am__quote = 
install_sh = /home/mqq/Desktop/complier/splint-3.1.2/config/install-sh

AUTOMAKE_OPTIONS = 1.5 foreign

SUFFIXES = .h .c .o .l .check

# Check files before compiling; requires splint!
CHECK = 1

# Some preferences
### We use the no-lines option to prevent confusion with splint flag settings.
### Should fix splint to avoid this...
YFLAGS = -v -t -d --debug --no-lines
LFLAGS = -L

BISON_SRC = cgrammar.y  llgrammar.y  mtgrammar.y  signature.y

bin_PROGRAMS = splint

EXTRA_PROGRAMS = lcl

AM_CPPFLAGS = -IHeaders

SETSRC = globSet.c intSet.c typeIdSet.c guardSet.c usymIdSet.c sRefSet.c

LISTSRC = clauseStack.c filelocStack.c \
          cstringList.c cstringSList.c sRefSetList.c ctypeList.c \
          enumNameList.c enumNameSList.c exprNodeList.c exprNodeSList.c \
          uentryList.c fileIdList.c filelocList.c qualList.c sRefList.c \
          flagMarkerList.c idDeclList.c flagSpec.c


CPPSRC = cppmain.c cpplib.c cppexp.c cpphash.c cpperror.c

CSRC = context.c uentry.c cprim.c macrocache.c qual.c qtype.c stateClause.c \
       stateClauseList.c ctype.c cvar.c clabstract.c idDecl.c clause.c \
       globalsClause.c modifiesClause.c warnClause.c functionClause.c \
       functionClauseList.c metaStateConstraint.c metaStateConstraintList.c \
       metaStateExpression.c metaStateSpecifier.c functionConstraint.c \
       pointers.c cscannerHelp.c	


SPLINTSRC = exprNode.c exprChecks.c llmain.c help.c rcfiles.c
CHECKSRC = structNames.c transferChecks.c varKinds.c nameChecks.c

GLOBSRC = globals.c flags.c general.c osd.c reader.c mtreader.c

GRAMSRC = cgrammar.c cscanner.c mtscanner.c mtgrammar.c llgrammar.c signature.c

OVERFLOWCHSRC = constraintList.c constraintResolve.c \
                constraintGeneration.c constraintTerm.c \
                constraintExprData.c constraintExpr.c constraint.c \
                loopHeuristics.c 


GENERALSRC = exprData.c cstring.c fileloc.c message.c inputStream.c \
             fileTable.c cstringTable.c valueTable.c stateValue.c \
             llerror.c messageLog.c flagMarker.c aliasTable.c ynm.c \
             sRefTable.c genericTable.c ekind.c usymtab.c multiVal.c \
             lltok.c sRef.c lcllib.c randomNumbers.c fileLib.c


METASTATESRC = stateInfo.c stateCombinationTable.c metaStateTable.c \
               metaStateInfo.c annotationTable.c annotationInfo.c mttok.c \
               mtDeclarationNode.c mtDeclarationPieces.c mtDeclarationPiece.c \
               mtContextNode.c mtValuesNode.c mtDefaultsNode.c \
               mtAnnotationsNode.c mtMergeNode.c mtAnnotationList.c \
               mtAnnotationDecl.c mtTransferClauseList.c mtTransferClause.c \
               mtTransferAction.c mtLoseReferenceList.c mtLoseReference.c \
               mtDefaultsDeclList.c mtDefaultsDecl.c mtMergeItem.c \
               mtMergeClause.c mtMergeClauseList.c


LCLONLYSRC = usymtab_interface.c abstract.c ltoken.c lclscanline.c \
             lclsyntable.c lcltokentable.c sort.c symtable.c lclinit.c \
             shift.c lclscan.c lsymbol.c mapping.c


LSLSRC = tokentable.c scan.c scanline.c lslparse.c \
         lh.c checking.c lclctypes.c imports.c lslinit.c syntable.c 


LCLSETSRC = lsymbolSet.c sigNodeSet.c lslOpSet.c sortSet.c

LCLLISTSRC = initDeclNodeList.c sortList.c declaratorInvNodeList.c \
             interfaceNodeList.c sortSetList.c declaratorNodeList.c \
             letDeclNodeList.c stDeclNodeList.c storeRefNodeList.c \
             lslOpList.c lsymbolList.c termNodeList.c ltokenList.c \
             traitRefNodeList.c pairNodeList.c typeNameNodeList.c \
             fcnNodeList.c paramNodeList.c programNodeList.c \
             varDeclarationNodeList.c varNodeList.c quantifierNodeList.c \
             replaceNodeList.c importNodeList.c


HEADERSRC = Headers/abstBodyNode.h           Headers/ltokenList.h \
          Headers/abstract.h               Headers/macrocache.h \
          Headers/abstractNode.h           Headers/mapping.h \
          Headers/message.h \
          Headers/aliasStack.h             Headers/messageLog.h \
          Headers/aliasTable.h             Headers/metaStateConstraint.h \
          Headers/annotationInfo.h         Headers/metaStateConstraintList.h \
          Headers/annotationTable.h        Headers/metaStateExpression.h \
          Headers/arrayQualNode.h          Headers/metaStateInfo.h \
          Headers/basic.h                  Headers/metaStateSpecifier.h \
          Headers/bool.h                   Headers/metaStateTable.h \
          Headers/boolStack.h              Headers/misc.h \
          Headers/cgrammar.h               Headers/modifiesClause.h \
          Headers/cgrammar_tokens.h        Headers/modifyNode.h \
          Headers/checking.h               Headers/mtAnnotationDecl.h \
          Headers/clabstract.h             Headers/mtAnnotationList.h \
          Headers/claimNode.h              Headers/mtAnnotationsNode.h \
          Headers/clause.h                 Headers/mtContextNode.h \
          Headers/clauseStack.h            Headers/mtDeclarationNode.h \
          Headers/code.h                   Headers/mtDeclarationPiece.h \
          Headers/constants.h              Headers/mtDeclarationPieces.h \
          Headers/constDeclarationNode.h   Headers/mtDefaultsDecl.h \
          Headers/constraintExprData.h     Headers/mtDefaultsDeclList.h \
          Headers/constraintExpr.h         Headers/mtDefaultsNode.h \
          Headers/constraint.h             Headers/mtgrammar.h \
          Headers/constraintList2.h        Headers/mtgrammar.tab.h \
          Headers/constraintList.h         Headers/mtgrammar_tokens.h \
          Headers/constraintOutput.h       Headers/mtincludes.h \
          Headers/constraintResolve.h      Headers/mtLoseReference.h \
          Headers/constraintTerm.h         Headers/mtLoseReferenceList.h \
          Headers/context.h                Headers/mtMergeClause.h \
          Headers/cpperror.h               Headers/mtMergeClauseList.h \
          Headers/cppexp.h                 Headers/mtMergeItem.h \
          Headers/cpp.h                    Headers/mtMergeNode.h \
          Headers/cpphash.h                Headers/mtreader.h \
          Headers/cpplib.h                 Headers/mtscanner.h \
          Headers/cprim.h                  Headers/mttok.h \
          Headers/cscanner.h               Headers/mtTransferAction.h \
          Headers/cstring.h                Headers/mtTransferClause.h \
          Headers/cstringList.h            Headers/mtTransferClauseList.h \
          Headers/cstringSList.h           Headers/mtValuesNode.h \
          Headers/cstringTable.h           Headers/multiVal.h \
          Headers/ctokens.h                Headers/nameChecks.h \
          Headers/ctypeList.h              Headers/nameNode.h \
          Headers/CTypesNode.h             Headers/opFormNode.h \
          Headers/cvar.h                   Headers/osd.h \
          Headers/declaratorInvNode.h      Headers/pairNode.h \
          Headers/declaratorInvNodeList.h  Headers/pairNodeList.h \
          Headers/declaratorNode.h         Headers/paramNode.h \
          Headers/declaratorNodeList.h     Headers/paramNodeList.h \
          Headers/dmalloc.h                Headers/osd.h \
          Headers/ekind.h                  Headers/pp.h \
          Headers/enumNameList.h           Headers/privateNode.h \
          Headers/enumNameSList.h          Headers/programNode.h \
          Headers/enumSpecNode.h           Headers/programNodeList.h \
          Headers/exportNode.h             Headers/qtype.h \
          Headers/exposedNode.h            Headers/qual.h \
          Headers/exprChecks.h             Headers/qualList.h \
          Headers/exprData.h               Headers/quantifiedTermNode.h \
          Headers/exprNode.h               Headers/quantifierNode.h \
          Headers/exprNodeList.h           Headers/quantifierNodeList.h \
          Headers/exprNodeSList.h          Headers/randomNumbers.h \
          Headers/fcnNode.h                Headers/rcfiles.h \
          Headers/fcnNodeList.h            Headers/reader.h \
          Headers/fileId.h                 Headers/refTable-branch.h \
          Headers/fileIdList.h             Headers/renamingNode.h \
          Headers/fileLib.h                Headers/replaceNode.h \
          Headers/fileloc.h                Headers/replaceNodeList.h \
          Headers/filelocList.h            Headers/scan.h \
          Headers/filelocStack.h           Headers/scanline.h \
          Headers/fileTable.h              Headers/sgrammar_tokens.h \
          Headers/flag_codes.h             Headers/sHerald.h \
          Headers/flagMarker.h             Headers/shift.h \
          Headers/flagMarkerList.h         Headers/signature2.h \
          Headers/flags.h                  Headers/signature_gen.h \
          Headers/flagSpec.h               Headers/signature.h \
          Headers/forwardTypes.h           Headers/signNode.h \
          Headers/functionClause.h         Headers/sigNode.h \
          Headers/functionClauseList.h     Headers/sigNodeSet.h \
          Headers/functionConstraint.h     Headers/sort.h \
          Headers/general.h                Headers/sortList.h \
          Headers/genericTable.h           Headers/sortSet.h \
          Headers/globalList.h             Headers/sortSetList.h \
          Headers/globalsClause.h          \
          Headers/globals.h                \
          Headers/globSet.h                Headers/sRef.h \
          Headers/gram.h                   Headers/sRefList.h \
          Headers/guardSet.h               Headers/sRefSet.h \
          Headers/handle.h                 Headers/sRefSetList.h \
          Headers/sRefSetStack.h \
          Headers/idDecl.h                 Headers/sRefTable.h \
          Headers/idDeclList.h             Headers/stateClause.h \
          Headers/importNode.h             Headers/stateClauseList.h \
          Headers/importNodeList.h         Headers/stateCombinationTable.h \
          Headers/imports.h                Headers/stateInfo.h \
          Headers/initDeclNode.h           Headers/stateValue.h \
          Headers/initDeclNodeList.h       Headers/stDeclNode.h \
          Headers/inputStream.h            Headers/stDeclNodeList.h \
          Headers/interfaceNode.h          Headers/stmtNode.h \
          Headers/interfaceNodeList.h      Headers/storeRefNode.h \
          Headers/intSet.h                 Headers/storeRefNodeList.h \
          Headers/intTable.h               Headers/strOrUnionNode.h \
          Headers/iterNode.h               Headers/structNames.h \
          Headers/lcl_constants.h          Headers/symtable.h \
          Headers/lclctypes.h              Headers/syntable.h \
          Headers/lclForwardTypes.h        Headers/system_constants.h \
          Headers/lclinit.h                Headers/taggedUnionNode.h \
          Headers/lcllib.h                 Headers/termNode.h \
          Headers/lclMisc.h                Headers/termNodeList.h \
          Headers/lclPredicateNode.h       Headers/tmpname.h \
          Headers/lclscan.h                Headers/tokentable.h \
          Headers/lclscanline.h            Headers/traitRefNode.h \
          Headers/lclsyntable.h            Headers/traitRefNodeList.h \
          Headers/lcltokentable.h          Headers/transferChecks.h \
          Headers/lclTypeSpecNode.h        Headers/typeExpr.h \
          Headers/lctype.h                 Headers/typeIdSet.h \
          Headers/letDeclNode.h            Headers/typeNameNode.h \
          Headers/letDeclNodeList.h        Headers/typeNameNodeList.h \
          Headers/lh.h                     Headers/typeNamePack.h \
          Headers/limwr.h                  Headers/typeNode.h \
          Headers/uentry.h \
          Headers/llerror.h                Headers/uentryList.h \
          Headers/llglobals.h              Headers/usymId.h \
          Headers/llgrammar2.h             Headers/usymIdSet.h \
          Headers/llgrammar_gen2.h        \
          Headers/llgrammar_gen.h          Headers/usymtab.h \
          Headers/llgrammar.h              Headers/usymtab_interface.h \
          Headers/llmain.h                 Headers/valueMatrix.h \
          Headers/lltok.h                  Headers/valueTable.h \
          Headers/lslinit.h                Headers/varDeclarationNode.h \
          Headers/lslOp.h                  Headers/varDeclarationNodeList.h \
          Headers/lslOpList.h              Headers/varKinds.h \
          Headers/lslOpSet.h               Headers/varNode.h \
          Headers/lslparse.h               Headers/varNodeList.h \
          Headers/lsymbol.h                Headers/version.h \
          Headers/lsymbolList.h            Headers/warnClause.h \
          Headers/lsymbolSet.h             Headers/ynm.h \
          Headers/ltoken.h   Headers/splintMacros.nf  \
          Headers/typeId.h \
          Headers/pointers.h   Headers/mstring.h   Headers/help.h


IFILES = ctbase.i  cttable.i  exprDataQuite.i

EXTRA_DIST = $(BISON_SRC) bison.head bison.reset $(HEADERSRC)  \
            flags.def cscanner.l flex.head flex.reset $(IFILES) \
            .splintrc LICENSE \
            Headers/cscannerHelp.h \
 Headers/256_random_numbers.nf  Headers/splintMacros.nf	Headers/reservedNames.nf

#Makefile.binary.am   Makefile.binary.in

#Files that are used on systems that do not have bison or yacc
DER_BISON_FILES = signature.c.der  cgrammar.c.der  mtgrammar.c.der \
                  llgrammar.c.der 

DER_FILES = $(DER_BISON_FILES)

COMMONSRC = $(CPPSRC) $(CSRC) $(CHECKSRC) $(GENERALSRC) \
            $(GLOBSRC) $(IFACESRC) $(LISTSRC) $(SETSRC) $(METASTATESRC)


ALLSRC = $(GRAMSRC) $(COMMONSRC) $(SPLINTSRC) $(OVERFLOWCHSRC) $(DER_FILES) $(HEADERSRC)

#files to run Splint on
LINTSRC = $(COMMONSRC) $(SPLINTSRC) 

# cscanner.c cgrammar.c

#ALLSRC = $(COMMONSRC) $(SPLINTSRC) $(DER_FILES) $(HEADERSRC)
LCLSRC = $(LCLSETSRC) $(LCLLISTSRC) $(LSLSRC) $(CMNSRC) $(LCLONLYSRC) 
lcl_SOURCES = $(LCLSRC)

splint_SOURCES = $(ALLSRC)
splint_LDADD = $(LCLOBJ) 

# Ensure the LCL objects get built if needed
splint_DEPENDENCIES = $(LCLOBJ)

BUILT_SOURCES = Headers/signature_gen.h Headers/cgrammar_tokens.h \
                Headers/llgrammar_gen.h Headers/llgrammar_gen2.h \
                Headers/mtgrammar_tokens.h signature.c cgrammar.c \
                llgrammar.c mtgrammar.c Headers/flag_codes.gen \
                $(DER_FILES)


CHECKS = $(subst .c,.check,$(splint_SOURCES))

binDir = bin

CLEANFILES = splint$(EXEEXT)  ../$(top_builddir)/$(binDir)/splint$(EXEEXT)
subdir = src
mkinstalldirs = $(SHELL) $(top_srcdir)/config/mkinstalldirs
CONFIG_HEADER = $(top_builddir)/config.h
CONFIG_CLEAN_FILES =
EXTRA_PROGRAMS = lcl$(EXEEXT)
bin_PROGRAMS = splint$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am__objects_1 = lsymbolSet.$(OBJEXT) sigNodeSet.$(OBJEXT) \
	lslOpSet.$(OBJEXT) sortSet.$(OBJEXT)
am__objects_2 = initDeclNodeList.$(OBJEXT) sortList.$(OBJEXT) \
	declaratorInvNodeList.$(OBJEXT) interfaceNodeList.$(OBJEXT) \
	sortSetList.$(OBJEXT) declaratorNodeList.$(OBJEXT) \
	letDeclNodeList.$(OBJEXT) stDeclNodeList.$(OBJEXT) \
	storeRefNodeList.$(OBJEXT) lslOpList.$(OBJEXT) \
	lsymbolList.$(OBJEXT) termNodeList.$(OBJEXT) \
	ltokenList.$(OBJEXT) traitRefNodeList.$(OBJEXT) \
	pairNodeList.$(OBJEXT) typeNameNodeList.$(OBJEXT) \
	fcnNodeList.$(OBJEXT) paramNodeList.$(OBJEXT) \
	programNodeList.$(OBJEXT) varDeclarationNodeList.$(OBJEXT) \
	varNodeList.$(OBJEXT) quantifierNodeList.$(OBJEXT) \
	replaceNodeList.$(OBJEXT) importNodeList.$(OBJEXT)
am__objects_3 = tokentable.$(OBJEXT) scan.$(OBJEXT) scanline.$(OBJEXT) \
	lslparse.$(OBJEXT) lh.$(OBJEXT) checking.$(OBJEXT) \
	lclctypes.$(OBJEXT) imports.$(OBJEXT) lslinit.$(OBJEXT) \
	syntable.$(OBJEXT)
am__objects_5 = usymtab_interface.$(OBJEXT) abstract.$(OBJEXT) \
	ltoken.$(OBJEXT) lclscanline.$(OBJEXT) lclsyntable.$(OBJEXT) \
	lcltokentable.$(OBJEXT) sort.$(OBJEXT) symtable.$(OBJEXT) \
	lclinit.$(OBJEXT) shift.$(OBJEXT) lclscan.$(OBJEXT) \
	lsymbol.$(OBJEXT) mapping.$(OBJEXT)
am__objects_6 = $(am__objects_1) $(am__objects_2) $(am__objects_3) \
	$(am__objects_4) $(am__objects_5)
am_lcl_OBJECTS = $(am__objects_6)
lcl_OBJECTS = $(am_lcl_OBJECTS)
lcl_LDADD = $(LDADD)
lcl_DEPENDENCIES =
lcl_LDFLAGS =
am__objects_7 = cgrammar.$(OBJEXT) cscanner.$(OBJEXT) \
	mtscanner.$(OBJEXT) mtgrammar.$(OBJEXT) llgrammar.$(OBJEXT) \
	signature.$(OBJEXT)
am__objects_8 = cppmain.$(OBJEXT) cpplib.$(OBJEXT) cppexp.$(OBJEXT) \
	cpphash.$(OBJEXT) cpperror.$(OBJEXT)
am__objects_9 = context.$(OBJEXT) uentry.$(OBJEXT) cprim.$(OBJEXT) \
	macrocache.$(OBJEXT) qual.$(OBJEXT) qtype.$(OBJEXT) \
	stateClause.$(OBJEXT) stateClauseList.$(OBJEXT) ctype.$(OBJEXT) \
	cvar.$(OBJEXT) clabstract.$(OBJEXT) idDecl.$(OBJEXT) \
	clause.$(OBJEXT) globalsClause.$(OBJEXT) \
	modifiesClause.$(OBJEXT) warnClause.$(OBJEXT) \
	functionClause.$(OBJEXT) functionClauseList.$(OBJEXT) \
	metaStateConstraint.$(OBJEXT) metaStateConstraintList.$(OBJEXT) \
	metaStateExpression.$(OBJEXT) metaStateSpecifier.$(OBJEXT) \
	functionConstraint.$(OBJEXT) pointers.$(OBJEXT) \
	cscannerHelp.$(OBJEXT)
am__objects_10 = structNames.$(OBJEXT) transferChecks.$(OBJEXT) \
	varKinds.$(OBJEXT) nameChecks.$(OBJEXT)
am__objects_11 = exprData.$(OBJEXT) cstring.$(OBJEXT) fileloc.$(OBJEXT) \
	message.$(OBJEXT) inputStream.$(OBJEXT) fileTable.$(OBJEXT) \
	cstringTable.$(OBJEXT) valueTable.$(OBJEXT) \
	stateValue.$(OBJEXT) llerror.$(OBJEXT) messageLog.$(OBJEXT) \
	flagMarker.$(OBJEXT) aliasTable.$(OBJEXT) ynm.$(OBJEXT) \
	sRefTable.$(OBJEXT) genericTable.$(OBJEXT) ekind.$(OBJEXT) \
	usymtab.$(OBJEXT) multiVal.$(OBJEXT) lltok.$(OBJEXT) \
	sRef.$(OBJEXT) lcllib.$(OBJEXT) randomNumbers.$(OBJEXT) \
	fileLib.$(OBJEXT)
am__objects_12 = globals.$(OBJEXT) flags.$(OBJEXT) general.$(OBJEXT) \
	osd.$(OBJEXT) reader.$(OBJEXT) mtreader.$(OBJEXT)
am__objects_13 = clauseStack.$(OBJEXT) filelocStack.$(OBJEXT) \
	cstringList.$(OBJEXT) cstringSList.$(OBJEXT) \
	sRefSetList.$(OBJEXT) ctypeList.$(OBJEXT) \
	enumNameList.$(OBJEXT) enumNameSList.$(OBJEXT) \
	exprNodeList.$(OBJEXT) exprNodeSList.$(OBJEXT) \
	uentryList.$(OBJEXT) fileIdList.$(OBJEXT) filelocList.$(OBJEXT) \
	qualList.$(OBJEXT) sRefList.$(OBJEXT) flagMarkerList.$(OBJEXT) \
	idDeclList.$(OBJEXT) flagSpec.$(OBJEXT)
am__objects_14 = globSet.$(OBJEXT) intSet.$(OBJEXT) typeIdSet.$(OBJEXT) \
	guardSet.$(OBJEXT) usymIdSet.$(OBJEXT) sRefSet.$(OBJEXT)
am__objects_15 = stateInfo.$(OBJEXT) stateCombinationTable.$(OBJEXT) \
	metaStateTable.$(OBJEXT) metaStateInfo.$(OBJEXT) \
	annotationTable.$(OBJEXT) annotationInfo.$(OBJEXT) \
	mttok.$(OBJEXT) mtDeclarationNode.$(OBJEXT) \
	mtDeclarationPieces.$(OBJEXT) mtDeclarationPiece.$(OBJEXT) \
	mtContextNode.$(OBJEXT) mtValuesNode.$(OBJEXT) \
	mtDefaultsNode.$(OBJEXT) mtAnnotationsNode.$(OBJEXT) \
	mtMergeNode.$(OBJEXT) mtAnnotationList.$(OBJEXT) \
	mtAnnotationDecl.$(OBJEXT) mtTransferClauseList.$(OBJEXT) \
	mtTransferClause.$(OBJEXT) mtTransferAction.$(OBJEXT) \
	mtLoseReferenceList.$(OBJEXT) mtLoseReference.$(OBJEXT) \
	mtDefaultsDeclList.$(OBJEXT) mtDefaultsDecl.$(OBJEXT) \
	mtMergeItem.$(OBJEXT) mtMergeClause.$(OBJEXT) \
	mtMergeClauseList.$(OBJEXT)
am__objects_16 = $(am__objects_8) $(am__objects_9) $(am__objects_10) \
	$(am__objects_11) $(am__objects_12) $(am__objects_4) \
	$(am__objects_13) $(am__objects_14) $(am__objects_15)
am__objects_17 = exprNode.$(OBJEXT) exprChecks.$(OBJEXT) \
	llmain.$(OBJEXT) help.$(OBJEXT) rcfiles.$(OBJEXT)
am__objects_18 = constraintList.$(OBJEXT) constraintResolve.$(OBJEXT) \
	constraintGeneration.$(OBJEXT) constraintTerm.$(OBJEXT) \
	constraintExprData.$(OBJEXT) constraintExpr.$(OBJEXT) \
	constraint.$(OBJEXT) loopHeuristics.$(OBJEXT)
am__objects_19 =
am__objects_20 = $(am__objects_19)
am__objects_21 = $(am__objects_7) $(am__objects_16) $(am__objects_17) \
	$(am__objects_18) $(am__objects_20) $(am__objects_19)
am_splint_OBJECTS = $(am__objects_21)
splint_OBJECTS = $(am_splint_OBJECTS)
splint_LDFLAGS =

DEFS = -DHAVE_CONFIG_H
DEFAULT_INCLUDES =  -I. -I$(srcdir) -I$(top_builddir)
CPPFLAGS = 
LDFLAGS = 
LIBS = 
depcomp = $(SHELL) $(top_srcdir)/config/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/abstract.Po \
	./$(DEPDIR)/aliasTable.Po \
	./$(DEPDIR)/annotationInfo.Po \
	./$(DEPDIR)/annotationTable.Po \
	./$(DEPDIR)/cgrammar.Po ./$(DEPDIR)/checking.Po \
	./$(DEPDIR)/clabstract.Po ./$(DEPDIR)/clause.Po \
	./$(DEPDIR)/clauseStack.Po \
	./$(DEPDIR)/constraint.Po \
	./$(DEPDIR)/constraintExpr.Po \
	./$(DEPDIR)/constraintExprData.Po \
	./$(DEPDIR)/constraintGeneration.Po \
	./$(DEPDIR)/constraintList.Po \
	./$(DEPDIR)/constraintResolve.Po \
	./$(DEPDIR)/constraintTerm.Po \
	./$(DEPDIR)/context.Po ./$(DEPDIR)/cpperror.Po \
	./$(DEPDIR)/cppexp.Po ./$(DEPDIR)/cpphash.Po \
	./$(DEPDIR)/cpplib.Po ./$(DEPDIR)/cppmain.Po \
	./$(DEPDIR)/cprim.Po ./$(DEPDIR)/cscanner.Po \
	./$(DEPDIR)/cscannerHelp.Po ./$(DEPDIR)/cstring.Po \
	./$(DEPDIR)/cstringList.Po \
	./$(DEPDIR)/cstringSList.Po \
	./$(DEPDIR)/cstringTable.Po ./$(DEPDIR)/ctype.Po \
	./$(DEPDIR)/ctypeList.Po ./$(DEPDIR)/cvar.Po \
	./$(DEPDIR)/declaratorInvNodeList.Po \
	./$(DEPDIR)/declaratorNodeList.Po \
	./$(DEPDIR)/ekind.Po ./$(DEPDIR)/enumNameList.Po \
	./$(DEPDIR)/enumNameSList.Po \
	./$(DEPDIR)/exprChecks.Po ./$(DEPDIR)/exprData.Po \
	./$(DEPDIR)/exprNode.Po ./$(DEPDIR)/exprNodeList.Po \
	./$(DEPDIR)/exprNodeSList.Po \
	./$(DEPDIR)/fcnNodeList.Po \
	./$(DEPDIR)/fileIdList.Po ./$(DEPDIR)/fileLib.Po \
	./$(DEPDIR)/fileTable.Po ./$(DEPDIR)/fileloc.Po \
	./$(DEPDIR)/filelocList.Po \
	./$(DEPDIR)/filelocStack.Po \
	./$(DEPDIR)/flagMarker.Po \
	./$(DEPDIR)/flagMarkerList.Po \
	./$(DEPDIR)/flagSpec.Po ./$(DEPDIR)/flags.Po \
	./$(DEPDIR)/functionClause.Po \
	./$(DEPDIR)/functionClauseList.Po \
	./$(DEPDIR)/functionConstraint.Po \
	./$(DEPDIR)/general.Po ./$(DEPDIR)/genericTable.Po \
	./$(DEPDIR)/globSet.Po ./$(DEPDIR)/globals.Po \
	./$(DEPDIR)/globalsClause.Po \
	./$(DEPDIR)/guardSet.Po ./$(DEPDIR)/help.Po \
	./$(DEPDIR)/idDecl.Po ./$(DEPDIR)/idDeclList.Po \
	./$(DEPDIR)/importNodeList.Po \
	./$(DEPDIR)/imports.Po \
	./$(DEPDIR)/initDeclNodeList.Po \
	./$(DEPDIR)/inputStream.Po ./$(DEPDIR)/intSet.Po \
	./$(DEPDIR)/interfaceNodeList.Po \
	./$(DEPDIR)/lclctypes.Po ./$(DEPDIR)/lclinit.Po \
	./$(DEPDIR)/lcllib.Po ./$(DEPDIR)/lclscan.Po \
	./$(DEPDIR)/lclscanline.Po \
	./$(DEPDIR)/lclsyntable.Po \
	./$(DEPDIR)/lcltokentable.Po \
	./$(DEPDIR)/letDeclNodeList.Po ./$(DEPDIR)/lh.Po \
	./$(DEPDIR)/llerror.Po ./$(DEPDIR)/llgrammar.Po \
	./$(DEPDIR)/llmain.Po ./$(DEPDIR)/lltok.Po \
	./$(DEPDIR)/loopHeuristics.Po \
	./$(DEPDIR)/lslOpList.Po ./$(DEPDIR)/lslOpSet.Po \
	./$(DEPDIR)/lslinit.Po ./$(DEPDIR)/lslparse.Po \
	./$(DEPDIR)/lsymbol.Po ./$(DEPDIR)/lsymbolList.Po \
	./$(DEPDIR)/lsymbolSet.Po ./$(DEPDIR)/ltoken.Po \
	./$(DEPDIR)/ltokenList.Po ./$(DEPDIR)/macrocache.Po \
	./$(DEPDIR)/mapping.Po ./$(DEPDIR)/message.Po \
	./$(DEPDIR)/messageLog.Po \
	./$(DEPDIR)/metaStateConstraint.Po \
	./$(DEPDIR)/metaStateConstraintList.Po \
	./$(DEPDIR)/metaStateExpression.Po \
	./$(DEPDIR)/metaStateInfo.Po \
	./$(DEPDIR)/metaStateSpecifier.Po \
	./$(DEPDIR)/metaStateTable.Po \
	./$(DEPDIR)/modifiesClause.Po \
	./$(DEPDIR)/mtAnnotationDecl.Po \
	./$(DEPDIR)/mtAnnotationList.Po \
	./$(DEPDIR)/mtAnnotationsNode.Po \
	./$(DEPDIR)/mtContextNode.Po \
	./$(DEPDIR)/mtDeclarationNode.Po \
	./$(DEPDIR)/mtDeclarationPiece.Po \
	./$(DEPDIR)/mtDeclarationPieces.Po \
	./$(DEPDIR)/mtDefaultsDecl.Po \
	./$(DEPDIR)/mtDefaultsDeclList.Po \
	./$(DEPDIR)/mtDefaultsNode.Po \
	./$(DEPDIR)/mtLoseReference.Po \
	./$(DEPDIR)/mtLoseReferenceList.Po \
	./$(DEPDIR)/mtMergeClause.Po \
	./$(DEPDIR)/mtMergeClauseList.Po \
	./$(DEPDIR)/mtMergeItem.Po \
	./$(DEPDIR)/mtMergeNode.Po \
	./$(DEPDIR)/mtTransferAction.Po \
	./$(DEPDIR)/mtTransferClause.Po \
	./$(DEPDIR)/mtTransferClauseList.Po \
	./$(DEPDIR)/mtValuesNode.Po \
	./$(DEPDIR)/mtgrammar.Po ./$(DEPDIR)/mtreader.Po \
	./$(DEPDIR)/mtscanner.Po ./$(DEPDIR)/mttok.Po \
	./$(DEPDIR)/multiVal.Po ./$(DEPDIR)/nameChecks.Po \
	./$(DEPDIR)/osd.Po ./$(DEPDIR)/pairNodeList.Po \
	./$(DEPDIR)/paramNodeList.Po \
	./$(DEPDIR)/pointers.Po \
	./$(DEPDIR)/programNodeList.Po ./$(DEPDIR)/qtype.Po \
	./$(DEPDIR)/qual.Po ./$(DEPDIR)/qualList.Po \
	./$(DEPDIR)/quantifierNodeList.Po \
	./$(DEPDIR)/randomNumbers.Po ./$(DEPDIR)/rcfiles.Po \
	./$(DEPDIR)/reader.Po \
	./$(DEPDIR)/replaceNodeList.Po ./$(DEPDIR)/sRef.Po \
	./$(DEPDIR)/sRefList.Po ./$(DEPDIR)/sRefSet.Po \
	./$(DEPDIR)/sRefSetList.Po ./$(DEPDIR)/sRefTable.Po \
	./$(DEPDIR)/scan.Po ./$(DEPDIR)/scanline.Po \
	./$(DEPDIR)/shift.Po ./$(DEPDIR)/sigNodeSet.Po \
	./$(DEPDIR)/signature.Po ./$(DEPDIR)/sort.Po \
	./$(DEPDIR)/sortList.Po ./$(DEPDIR)/sortSet.Po \
	./$(DEPDIR)/sortSetList.Po \
	./$(DEPDIR)/stDeclNodeList.Po \
	./$(DEPDIR)/stateClause.Po \
	./$(DEPDIR)/stateClauseList.Po \
	./$(DEPDIR)/stateCombinationTable.Po \
	./$(DEPDIR)/stateInfo.Po ./$(DEPDIR)/stateValue.Po \
	./$(DEPDIR)/storeRefNodeList.Po \
	./$(DEPDIR)/structNames.Po ./$(DEPDIR)/symtable.Po \
	./$(DEPDIR)/syntable.Po ./$(DEPDIR)/termNodeList.Po \
	./$(DEPDIR)/tokentable.Po \
	./$(DEPDIR)/traitRefNodeList.Po \
	./$(DEPDIR)/transferChecks.Po \
	./$(DEPDIR)/typeIdSet.Po \
	./$(DEPDIR)/typeNameNodeList.Po \
	./$(DEPDIR)/uentry.Po ./$(DEPDIR)/uentryList.Po \
	./$(DEPDIR)/usymIdSet.Po ./$(DEPDIR)/usymtab.Po \
	./$(DEPDIR)/usymtab_interface.Po \
	./$(DEPDIR)/valueTable.Po \
	./$(DEPDIR)/varDeclarationNodeList.Po \
	./$(DEPDIR)/varKinds.Po ./$(DEPDIR)/varNodeList.Po \
	./$(DEPDIR)/warnClause.Po ./$(DEPDIR)/ynm.Po
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
CFLAGS = -g -O2
DIST_SOURCES = $(lcl_SOURCES) $(splint_SOURCES)
DIST_COMMON = Makefile.am Makefile.in
SOURCES = $(lcl_SOURCES) $(splint_SOURCES)

all: $(BUILT_SOURCES)
	$(MAKE) $(AM_MAKEFLAGS) all-am

.SUFFIXES:
.SUFFIXES: .h .c .o .l .check .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.ac $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --foreign  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
splint$(EXEEXT): $(splint_OBJECTS) $(splint_DEPENDENCIES) 
	@rm -f splint$(EXEEXT)
	$(LINK) $(splint_LDFLAGS) $(splint_OBJECTS) $(splint_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/abstract.Po
include ./$(DEPDIR)/aliasTable.Po
include ./$(DEPDIR)/annotationInfo.Po
include ./$(DEPDIR)/annotationTable.Po
include ./$(DEPDIR)/cgrammar.Po
include ./$(DEPDIR)/checking.Po
include ./$(DEPDIR)/clabstract.Po
include ./$(DEPDIR)/clause.Po
include ./$(DEPDIR)/clauseStack.Po
include ./$(DEPDIR)/constraint.Po
include ./$(DEPDIR)/constraintExpr.Po
include ./$(DEPDIR)/constraintExprData.Po
include ./$(DEPDIR)/constraintGeneration.Po
include ./$(DEPDIR)/constraintList.Po
include ./$(DEPDIR)/constraintResolve.Po
include ./$(DEPDIR)/constraintTerm.Po
include ./$(DEPDIR)/context.Po
include ./$(DEPDIR)/cpperror.Po
include ./$(DEPDIR)/cppexp.Po
include ./$(DEPDIR)/cpphash.Po
include ./$(DEPDIR)/cpplib.Po
include ./$(DEPDIR)/cppmain.Po
include ./$(DEPDIR)/cprim.Po
include ./$(DEPDIR)/cscanner.Po
include ./$(DEPDIR)/cscannerHelp.Po
include ./$(DEPDIR)/cstring.Po
include ./$(DEPDIR)/cstringList.Po
include ./$(DEPDIR)/cstringSList.Po
include ./$(DEPDIR)/cstringTable.Po
include ./$(DEPDIR)/ctype.Po
include ./$(DEPDIR)/ctypeList.Po
include ./$(DEPDIR)/cvar.Po
include ./$(DEPDIR)/declaratorInvNodeList.Po
include ./$(DEPDIR)/declaratorNodeList.Po
include ./$(DEPDIR)/ekind.Po
include ./$(DEPDIR)/enumNameList.Po
include ./$(DEPDIR)/enumNameSList.Po
include ./$(DEPDIR)/exprChecks.Po
include ./$(DEPDIR)/exprData.Po
include ./$(DEPDIR)/exprNode.Po
include ./$(DEPDIR)/exprNodeList.Po
include ./$(DEPDIR)/exprNodeSList.Po
include ./$(DEPDIR)/fcnNodeList.Po
include ./$(DEPDIR)/fileIdList.Po
include ./$(DEPDIR)/fileLib.Po
include ./$(DEPDIR)/fileTable.Po
include ./$(DEPDIR)/fileloc.Po
include ./$(DEPDIR)/filelocList.Po
include ./$(DEPDIR)/filelocStack.Po
include ./$(DEPDIR)/flagMarker.Po
include ./$(DEPDIR)/flagMarkerList.Po
include ./$(DEPDIR)/flagSpec.Po
include ./$(DEPDIR)/flags.Po
include ./$(DEPDIR)/functionClause.Po
include ./$(DEPDIR)/functionClauseList.Po
include ./$(DEPDIR)/functionConstraint.Po
include ./$(DEPDIR)/general.Po
include ./$(DEPDIR)/genericTable.Po
include ./$(DEPDIR)/globSet.Po
include ./$(DEPDIR)/globals.Po
include ./$(DEPDIR)/globalsClause.Po
include ./$(DEPDIR)/guardSet.Po
include ./$(DEPDIR)/help.Po
include ./$(DEPDIR)/idDecl.Po
include ./$(DEPDIR)/idDeclList.Po
include ./$(DEPDIR)/importNodeList.Po
include ./$(DEPDIR)/imports.Po
include ./$(DEPDIR)/initDeclNodeList.Po
include ./$(DEPDIR)/inputStream.Po
include ./$(DEPDIR)/intSet.Po
include ./$(DEPDIR)/interfaceNodeList.Po
include ./$(DEPDIR)/lclctypes.Po
include ./$(DEPDIR)/lclinit.Po
include ./$(DEPDIR)/lcllib.Po
include ./$(DEPDIR)/lclscan.Po
include ./$(DEPDIR)/lclscanline.Po
include ./$(DEPDIR)/lclsyntable.Po
include ./$(DEPDIR)/lcltokentable.Po
include ./$(DEPDIR)/letDeclNodeList.Po
include ./$(DEPDIR)/lh.Po
include ./$(DEPDIR)/llerror.Po
include ./$(DEPDIR)/llgrammar.Po
include ./$(DEPDIR)/llmain.Po
include ./$(DEPDIR)/lltok.Po
include ./$(DEPDIR)/loopHeuristics.Po
include ./$(DEPDIR)/lslOpList.Po
include ./$(DEPDIR)/lslOpSet.Po
include ./$(DEPDIR)/lslinit.Po
include ./$(DEPDIR)/lslparse.Po
include ./$(DEPDIR)/lsymbol.Po
include ./$(DEPDIR)/lsymbolList.Po
include ./$(DEPDIR)/lsymbolSet.Po
include ./$(DEPDIR)/ltoken.Po
include ./$(DEPDIR)/ltokenList.Po
include ./$(DEPDIR)/macrocache.Po
include ./$(DEPDIR)/mapping.Po
include ./$(DEPDIR)/message.Po
include ./$(DEPDIR)/messageLog.Po
include ./$(DEPDIR)/metaStateConstraint.Po
include ./$(DEPDIR)/metaStateConstraintList.Po
include ./$(DEPDIR)/metaStateExpression.Po
include ./$(DEPDIR)/metaStateInfo.Po
include ./$(DEPDIR)/metaStateSpecifier.Po
include ./$(DEPDIR)/metaStateTable.Po
include ./$(DEPDIR)/modifiesClause.Po
include ./$(DEPDIR)/mtAnnotationDecl.Po
include ./$(DEPDIR)/mtAnnotationList.Po
include ./$(DEPDIR)/mtAnnotationsNode.Po
include ./$(DEPDIR)/mtContextNode.Po
include ./$(DEPDIR)/mtDeclarationNode.Po
include ./$(DEPDIR)/mtDeclarationPiece.Po
include ./$(DEPDIR)/mtDeclarationPieces.Po
include ./$(DEPDIR)/mtDefaultsDecl.Po
include ./$(DEPDIR)/mtDefaultsDeclList.Po
include ./$(DEPDIR)/mtDefaultsNode.Po
include ./$(DEPDIR)/mtLoseReference.Po
include ./$(DEPDIR)/mtLoseReferenceList.Po
include ./$(DEPDIR)/mtMergeClause.Po
include ./$(DEPDIR)/mtMergeClauseList.Po
include ./$(DEPDIR)/mtMergeItem.Po
include ./$(DEPDIR)/mtMergeNode.Po
include ./$(DEPDIR)/mtTransferAction.Po
include ./$(DEPDIR)/mtTransferClause.Po
include ./$(DEPDIR)/mtTransferClauseList.Po
include ./$(DEPDIR)/mtValuesNode.Po
include ./$(DEPDIR)/mtgrammar.Po
include ./$(DEPDIR)/mtreader.Po
include ./$(DEPDIR)/mtscanner.Po
include ./$(DEPDIR)/mttok.Po
include ./$(DEPDIR)/multiVal.Po
include ./$(DEPDIR)/nameChecks.Po
include ./$(DEPDIR)/osd.Po
include ./$(DEPDIR)/pairNodeList.Po
include ./$(DEPDIR)/paramNodeList.Po
include ./$(DEPDIR)/pointers.Po
include ./$(DEPDIR)/programNodeList.Po
include ./$(DEPDIR)/qtype.Po
include ./$(DEPDIR)/qual.Po
include ./$(DEPDIR)/qualList.Po
include ./$(DEPDIR)/quantifierNodeList.Po
include ./$(DEPDIR)/randomNumbers.Po
include ./$(DEPDIR)/rcfiles.Po
include ./$(DEPDIR)/reader.Po
include ./$(DEPDIR)/replaceNodeList.Po
include ./$(DEPDIR)/sRef.Po
include ./$(DEPDIR)/sRefList.Po
include ./$(DEPDIR)/sRefSet.Po
include ./$(DEPDIR)/sRefSetList.Po
include ./$(DEPDIR)/sRefTable.Po
include ./$(DEPDIR)/scan.Po
include ./$(DEPDIR)/scanline.Po
include ./$(DEPDIR)/shift.Po
include ./$(DEPDIR)/sigNodeSet.Po
include ./$(DEPDIR)/signature.Po
include ./$(DEPDIR)/sort.Po
include ./$(DEPDIR)/sortList.Po
include ./$(DEPDIR)/sortSet.Po
include ./$(DEPDIR)/sortSetList.Po
include ./$(DEPDIR)/stDeclNodeList.Po
include ./$(DEPDIR)/stateClause.Po
include ./$(DEPDIR)/stateClauseList.Po
include ./$(DEPDIR)/stateCombinationTable.Po
include ./$(DEPDIR)/stateInfo.Po
include ./$(DEPDIR)/stateValue.Po
include ./$(DEPDIR)/storeRefNodeList.Po
include ./$(DEPDIR)/structNames.Po
include ./$(DEPDIR)/symtable.Po
include ./$(DEPDIR)/syntable.Po
include ./$(DEPDIR)/termNodeList.Po
include ./$(DEPDIR)/tokentable.Po
include ./$(DEPDIR)/traitRefNodeList.Po
include ./$(DEPDIR)/transferChecks.Po
include ./$(DEPDIR)/typeIdSet.Po
include ./$(DEPDIR)/typeNameNodeList.Po
include ./$(DEPDIR)/uentry.Po
include ./$(DEPDIR)/uentryList.Po
include ./$(DEPDIR)/usymIdSet.Po
include ./$(DEPDIR)/usymtab.Po
include ./$(DEPDIR)/usymtab_interface.Po
include ./$(DEPDIR)/valueTable.Po
include ./$(DEPDIR)/varDeclarationNodeList.Po
include ./$(DEPDIR)/varKinds.Po
include ./$(DEPDIR)/varNodeList.Po
include ./$(DEPDIR)/warnClause.Po
include ./$(DEPDIR)/ynm.Po

distclean-depend:
	-rm -rf ./$(DEPDIR)

.c.obj:
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `cygpath -w $<`
CCDEPMODE = depmode=gcc3
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	$(mkinstalldirs) $(distdir)/Headers
	@list='$(DISTFILES)'; for file in $$list; do \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)

install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:
	-test -z "$(CLEANFILES)" || rm -f $(CLEANFILES)

distclean-generic:
	-rm -f Makefile $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
	-test -z "$(BUILT_SOURCES)" || rm -f $(BUILT_SOURCES)
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am

distclean-am: clean-am distclean-compile distclean-depend \
	distclean-generic distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am

maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic distclean distclean-compile distclean-depend \
	distclean-generic distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic tags uninstall uninstall-am \
	uninstall-binPROGRAMS uninstall-info-am


# Keep it fake
.PHONY: lcl$(EXEEXT)
lcl$(EXEEXT):
	@echo "This is a fake target"; \
	 echo "Use configure's --with-lcl option to enable lcl"

signature.c.der:
	@if test x$(BISON) = xno; then \
	  echo "Cannot make signature.c.der because bison is not here" \
	else \
	  echo '* Making signature.c'; \
	  $(BISON) $(YFLAGS) -p lsl signature.y; \
	  $(CAT) bison.head signature.tab.c bison.reset >signature.c; \
	  $(CP) signature.c signature.c.der; \
	  $(MV) Headers/signature_gen.h Headers/signature_gen.bak || true; \
	  $(CAT) bison.head signature.tab.h bison.reset >Headers/signature_gen.h; \
	  $(RM) signature.tab.c signature.tab.h; \
	fi

Headers/signature_gen.h signature.c: signature.c.der signature.y
	@if test x$(BISON) = xno; then \
	  $(CP) signature.c.der signature.c; \
	else \
	  echo '* Making signature.c'; \
	  $(BISON) $(YFLAGS) -p lsl signature.y; \
	  $(CAT) bison.head signature.tab.c bison.reset >signature.c; \
	  $(CP) signature.c signature.c.der; \
	  $(MV) Headers/signature_gen.h Headers/signature_gen.bak; \
	  $(CAT) bison.head signature.tab.h bison.reset >Headers/signature_gen.h; \
	  $(RM) signature.tab.c signature.tab.h; \
	fi

Headers/cgrammar_tokens.h cgrammar.c: cgrammar.c.der cgrammar.y bison.head bison.reset
	@if test x$(BISON) = xno; then \
	  $(CP) cgrammar.c.der cgrammar.c; \
	else \
	  echo '* Making cgrammar.c'; \
          echo '*      Note: Expect 157 shift/reduce conflicts and 123 reduce/reduce conflicts. (see cgrammar.y for explanation)'; \
	  $(BISON) $(YFLAGS) cgrammar.y; \
	  $(CAT) bison.head cgrammar.tab.c bison.reset | $(SED) 's/YYSTYPE/cgrammar_YYSTYPE/g' | $(SED) 's/lsllex/cgrammar_lsllex/g' > cgrammar.c; \
	  $(CP) cgrammar.c cgrammar.c.der; \
	  $(MV) Headers/cgrammar_tokens.h Headers/cgrammar_tokens.bak || true; \
	  $(CAT) bison.head cgrammar.tab.h bison.reset | $(SED) 's/YYSTYPE/cgrammar_YYSTYPE/g' | $(SED) 's/lsllex/cgrammar_lsllex/g' > Headers/cgrammar_tokens.h; \
	  $(RM) cgrammar.tab.c cgrammar.tab.h; \
	fi

Headers/mtgrammar_tokens.h mtgrammar.c: mtgrammar.y
	@if test x$(BISON) = xno; then \
	  $(CP) mtgrammar.c.der mtgrammar.c; \
	else \
	  echo '* Making mtgrammar.c'; \
	  echo '*       Note: Expect 11 shift/reduce conflicts.'; \
	  $(BISON) $(YFLAGS) -p mt mtgrammar.y; \
	  $(CAT) bison.head mtgrammar.tab.c bison.reset >mtgrammar.c; \
	  $(CP) mtgrammar.c mtgrammar.c.der; \
	  $(MV) Headers/mtgrammar_tokens.h Headers/mtgrammar_tokens.bak; \
	  $(CAT) bison.head mtgrammar.tab.h bison.reset >Headers/mtgrammar_tokens.h; \
	  $(RM) mtgrammar.tab.c mtgrammar.tab.h; \
	fi

Headers/llgrammar_gen.h Headers/llgrammar_gen2.h llgrammar.c: llgrammar.c.der llgrammar.y
	@if test x$(BISON) = xno; then \
	  $(CP) llgrammar.c.der llgrammar.c; \
	else \
	  echo '* Making llgrammar.c'; \
	  echo '*       Note: Expect 2 shift/reduce conflicts'; \
	  $(BISON) $(YFLAGS) -p yl llgrammar.y; \
	  $(CAT) bison.head llgrammar.tab.c bison.reset >llgrammar.c; \
	  $(CP) llgrammar.c llgrammar.c.der; \
	  $(MV) Headers/llgrammar_gen2.h Headers/llgrammar_gen2.bak; \
	  $(CAT) bison.head llgrammar.tab.h bison.reset >Headers/llgrammar_gen2.h; \
	  $(MV) Headers/llgrammar_gen.h Headers/llgrammar_gen.bak; \
	  $(CAT) bison.head llgrammar.tab.h bison.reset >Headers/llgrammar_gen.h; \
	  $(RM) llgrammar.tab.c llgrammar.tab.h; \
	fi

cscanner.c: cscanner.l
	$(LEX) $(LFLAGS) cscanner.l 
	$(CAT) flex.head .c flex.reset | $(SED) 's/YYSTYPE/cgrammar_YYSTYPE/g'  | $(SED) 's/lsllex/cgrammar_lsllex/g' > cscanner.c

Headers/flag_codes.gen: flags.def
	grep "FLG_" flags.def > Headers/flag_codes.gen
	$(MAKE)
	cd ../lib; $(MAKE)

.PHONY: nocheck
nocheck:
	$(MAKE) CHECK=0

.PHONY: test
test:
	cd ../test; ${MAKE} --no-print-directory

.PHONY: libs
libs:
	cd ../lib; ${MAKE} --no-print-directory

### Automake generates wrong tags
.PHONY: etags
etags:
	maketags

lintnew: splintme

splintme: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude  $(OVERFLOWCHSRC) $(LINTSRC) $(LCLSRC) -dump lclint +forcehints -misplacedsharequal +showsourceloc -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw -mts tainted

splintmebounds: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude  $(OVERFLOWCHSRC) $(LINTSRC) $(LCLSRC) -dump lclint +forcehints -misplacedsharequal +showsourceloc -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw -mts tainted +bounds +impboundsconstraints

splintmesupcounts: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude  $(OVERFLOWCHSRC) $(LINTSRC) $(LCLSRC) -dump lclint +forcehints -misplacedsharequal +showsourceloc -unrecogcomments  -fcnuse -incondefs -exportlocal -supcounts -constuse -mts file -mts filerw 

lintbuffercheck: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude $(LINTSRC) $(OVERFLOWCHSRC) $(LCLSRC) -dump lclint +forcehints -misplacedsharequal +showsourceloc -unrecogcomments -supcounts -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw +bounds -DLINTBUFFERCHECK

valsplint:
	valgrind -v --leak-resolution=high --num-callers=20 --show-reachable=no --leak-check=yes ./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude $(LINTSRC) $(OVERFLOWCHSRC) $(LCLSRC) -dump lclint +forcehints -misplacedsharequal +showsourceloc -unrecogcomments -supcounts -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw 

splintsome: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude lcllib.c  -dump lclint +forcehints -misplacedsharequal +showsourceloc -unrecogcomments -supcounts -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw +partial

# drl changed to use # for comment
#/* $(LINTSRC) $(LCLSRC)*/

splinttest: 
	./splint $(DEFAULT_INCLUDES) $(DEFS) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) +singleinclude test.c +forcehints -misplacedsharequal +showsourceloc -unrecogcomments -fcnuse -incondefs -exportlocal -constuse -mts file -mts filerw +keep +supcounts +partial -null

all: splint$(EXEEXT) ../$(top_builddir)/$(binDir)/splint$(EXEEXT)

../$(top_builddir)/$(binDir)/splint$(EXEEXT):  splint$(EXEEXT)
	-$(RM) -f $(top_builddir)/$(binDir)/splint$(EXEEXT)
	ln -s $(top_builddir)/src/splint$(EXEEXT)  $(top_builddir)/$(binDir)/splint$(EXEEXT)

up: 
	-rm cgrammar.c llgrammar.c mtgrammar.c signature.c cscanner.c
	$(MAKE) clean

.c.o:
	@echo "Compiling "$<"..."; \
	source='$<' object='$@' libtool=no \
	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
	$(CCDEPMODE) $(depcomp) \
	$(COMPILE) -c `test -f $< || echo '$(srcdir)/'`$<
# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
