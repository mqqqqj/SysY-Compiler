
;; Function main (main, funcdef_no=0, decl_uid=1911, cgraph_uid=1, symbol_order=1) (executed once)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
saved_stack.1_3 = NONLOCAL
ESCAPED = saved_stack.1_3
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__builtin_stack_save";
"__builtin_stack_restore";
"saved_stack.1_3";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__builtin_stack_save";
"*__builtin_stack_restore";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"saved_stack.1_3" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "saved_stack.1_3";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__builtin_stack_save";
"__builtin_stack_restore";
"saved_stack.1_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"saved_stack.1_3" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = saved_stack.1_3\l"];
"STOREDANYTHING";
"INTEGER";
"__builtin_stack_save";
"__builtin_stack_restore";
"saved_stack.1_3";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"saved_stack.1_3" -> "ESCAPED";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as saved_stack.1_3
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__builtin_stack_save = { }
__builtin_stack_restore = { }
saved_stack.1_3 = { ESCAPED NONLOCAL }


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

saved_stack.1_3, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }

;; 2 loops found
;;
;; Loop 0
;;  header 0, latch 1
;;  depth 0, outer -1
;;  nodes: 0 1 2
;; 2 succs { 1 }
main ()
{
  void * saved_stack.1_3;

  <bb 2> [local count: 1073741824]:
  saved_stack.1_3 = __builtin_stack_save ();
  __builtin_stack_restore (saved_stack.1_3);
  return 0;

}


