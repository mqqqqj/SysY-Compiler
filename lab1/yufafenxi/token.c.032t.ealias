
;; Function main (main, funcdef_no=0, decl_uid=1911, cgraph_uid=1, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
saved_stack.1_7 = NONLOCAL
ESCAPED = &NONLOCAL
ESCAPED = &NONLOCAL
arr.0_14 = &HEAP(12)
tmp_19 = tmp_2
tmp_19 = i_3
_1 = i_3
_1 = tmp_19
*arr.0_14 + UNKNOWN = _1
i_21 = i_3
i_21 = &NONLOCAL
tmp_2 = &NULL
tmp_2 = tmp_19
i_3 = &NULL
i_3 = i_21
ESCAPED = saved_stack.1_7
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 5 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"__builtin_stack_save";
"__builtin_alloca_with_align";
"HEAP(12)";
"__builtin_stack_restore";
"saved_stack.1_7";
"arr.0_14"[label="arr.0_14 = { 10 }"];
"tmp_19"[label="tmp_19 = { 1 }"];
"i_3"[label="i_3 = { 1 5 }"];
"_1";
"*NULL";
"*ANYTHING";
"*STRING";
"*STOREDANYTHING";
"*INTEGER";
"*__builtin_stack_save";
"*__builtin_alloca_with_align";
"*HEAP(12)";
"*__builtin_stack_restore";
"*arr.0_14";
"*tmp_19";
"*tmp_2";
"*i_3";
"*_1";
"*i_21";

  // Edges in the constraint graph:
"NONLOCAL" -> "ESCAPED";
"saved_stack.1_7" -> "ESCAPED";
"ESCAPED" -> "ESCAPED";
"NONLOCAL" -> "saved_stack.1_7";
"tmp_19" -> "tmp_19";
"tmp_19" -> "tmp_19";
"i_3" -> "tmp_19";
"i_3" -> "i_3";
"i_3" -> "i_3";
"tmp_19" -> "_1";
"i_3" -> "_1";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"STOREDANYTHING";
"INTEGER";
"__builtin_stack_save";
"__builtin_alloca_with_align";
"HEAP(12)";
"__builtin_stack_restore";
"saved_stack.1_7";
"arr.0_14" [label="\N\n*arr.0_14 + UNKNOWN = tmp_19\l"];
"tmp_19";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP(12)";
"saved_stack.1_7" -> "ESCAPED";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = saved_stack.1_7\l"];
"STOREDANYTHING";
"INTEGER";
"__builtin_stack_save";
"__builtin_alloca_with_align";
"HEAP(12)";
"__builtin_stack_restore";
"saved_stack.1_7";
"arr.0_14" [label="\N\n*arr.0_14 + UNKNOWN = tmp_19\l"];
"tmp_19";

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "HEAP(12)";
"saved_stack.1_7" -> "ESCAPED";
"tmp_19" -> "HEAP(12)";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL ESCAPED NONLOCAL }
NONLOCAL = { ESCAPED NONLOCAL } same as saved_stack.1_7
STOREDANYTHING = { }
INTEGER = { ANYTHING }
__builtin_stack_save = { }
__builtin_alloca_with_align = { }
HEAP(12) = { NULL NONLOCAL }
__builtin_stack_restore = { }
saved_stack.1_7 = { ESCAPED NONLOCAL }
arr.0_14 = { HEAP(12) }
tmp_19 = { NULL NONLOCAL }
tmp_2 = { NULL NONLOCAL } same as tmp_19
i_3 = { NULL NONLOCAL } same as tmp_19
_1 = { NULL NONLOCAL } same as tmp_19
i_21 = { NULL NONLOCAL } same as tmp_19


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to non-local, points-to NULL, points-to vars: { }

Flow-insensitive points-to information

saved_stack.1_7, points-to non-local, points-to escaped, points-to NULL, points-to vars: { }
arr.0_14, points-to NULL, points-to vars: { D.1931 }

main ()
{
  int i;
  int tmp;
  int[0:D.1920] * arr.0;
  sizetype D.1920;
  int _1;
  void * saved_stack.1_7;

  <bb 2> :
  saved_stack.1_7 = __builtin_stack_save ();
  arr.0_14 = __builtin_alloca_with_align (440, 32);
  goto <bb 4>; [INV]

  <bb 3> :
  tmp_19 = tmp_2 + i_3;
  _1 = i_3 * tmp_19;
  *arr.0_14[i_3] = _1;
  i_21 = i_3 + 1;

  <bb 4> :
  # tmp_2 = PHI <0(2), tmp_19(3)>
  # i_3 = PHI <0(2), i_21(3)>
  if (i_3 <= 109)
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  __builtin_stack_restore (saved_stack.1_7);
  return 0;

}


