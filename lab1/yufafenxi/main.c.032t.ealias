
;; Function main (main, funcdef_no=0, decl_uid=1911, cgraph_uid=1, symbol_order=1)

Points-to analysis

Constraints:

ANYTHING = &ANYTHING
ESCAPED = *ESCAPED
ESCAPED = ESCAPED + UNKNOWN
*ESCAPED = NONLOCAL
NONLOCAL = &NONLOCAL
NONLOCAL = &ESCAPED
INTEGER = &ANYTHING
t_10 = b_2
b_11 = a_1 + UNKNOWN
b_11 = b_2 + UNKNOWN
a_12 = b_2
i_13 = i_3 + UNKNOWN
i_13 = &NONLOCAL
a_1 = &NULL
a_1 = a_12
b_2 = &NONLOCAL
b_2 = b_11
i_3 = &NONLOCAL
i_3 = i_13
ESCAPED = &NULL

Collapsing static cycles and doing variable substitution
Building predecessor graph
Detecting pointer and location equivalences


// The constraint graph before var-substitution in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING"[label="ANYTHING = { 2 }"];
"STRING";
"ESCAPED"[label="ESCAPED = { 1 }"];
"NONLOCAL"[label="NONLOCAL = { 4 5 }"];
"STOREDANYTHING";
"INTEGER"[label="INTEGER = { 2 }"];
"t_10";
"b_2"[label="b_2 = { 5 }"];
"b_11";
"a_1"[label="a_1 = { 1 }"];
"a_12";
"i_13"[label="i_13 = { 5 }"];
"i_3"[label="i_3 = { 5 }"];
"*NULL";
"*ANYTHING";
"*STRING";
"*ESCAPED";
"*NONLOCAL";
"*STOREDANYTHING";
"*INTEGER";
"*t_10";
"*b_2";
"*b_11";
"*a_1";
"*a_12";
"*i_13";
"*i_3";

  // Edges in the constraint graph:
"*ESCAPED" -> "ESCAPED";
"b_2" -> "t_10";
"b_11" -> "b_2";
"a_12" -> "a_1";
"b_2" -> "a_12";
"i_13" -> "i_3";
"NONLOCAL" -> "*ESCAPED";
}


Rewriting constraints and unifying variables
Uniting pointer but not location equivalent variables
Finding indirect cycles


// The constraint graph before solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"t_10" [label="\N\nb_11 = t_10 + UNKNOWN\l"];
"b_11";
"a_1" [label="\N\nb_11 = a_1 + UNKNOWN\l"];
"i_13" [label="\N\ni_13 = i_13 + UNKNOWN\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "b_11";
"STOREDANYTHING" -> "i_13";
"t_10" -> "a_1";
"b_11" -> "t_10";
}


Solving graph


// The constraint graph after solve-graph in dot format:
strict digraph {
  node [
    shape = box
  ]
  edge [
    fontsize = "12"
  ]

  // List of nodes and complex constraints in the constraint graph:
"NULL";
"ANYTHING";
"STRING";
"ESCAPED" [label="\N\nESCAPED = ESCAPED + UNKNOWN\lESCAPED = *ESCAPED\l*ESCAPED = NONLOCAL\l"];
"NONLOCAL";
"STOREDANYTHING";
"INTEGER";
"t_10" [label="\N\nb_11 = t_10 + UNKNOWN\l"];
"b_11";
"a_1" [label="\N\nb_11 = a_1 + UNKNOWN\l"];
"i_13" [label="\N\ni_13 = i_13 + UNKNOWN\l"];

  // Edges in the constraint graph:
"STOREDANYTHING" -> "ESCAPED";
"STOREDANYTHING" -> "b_11";
"STOREDANYTHING" -> "i_13";
"t_10" -> "a_1";
"b_11" -> "t_10";
}



Points-to sets

ANYTHING = { ANYTHING }
ESCAPED = { NULL }
NONLOCAL = { ESCAPED NONLOCAL }
STOREDANYTHING = { }
INTEGER = { ANYTHING }
t_10 = { NULL NONLOCAL }
b_2 = { NULL NONLOCAL } same as t_10
b_11 = { NULL NONLOCAL }
a_1 = { NULL NONLOCAL }
a_12 = { NULL NONLOCAL } same as t_10
i_13 = { NONLOCAL }
i_3 = { NONLOCAL } same as i_13


Alias information for main

Aliased symbols


Call clobber information

ESCAPED, points-to NULL, points-to vars: { }

Flow-insensitive points-to information


main ()
{
  int n;
  int t;
  int i;
  int b;
  int a;

  <bb 2> :
  goto <bb 4>; [INV]

  <bb 3> :
  t_10 = b_2;
  b_11 = a_1 + b_2;
  a_12 = b_2;
  i_13 = i_3 + 1;

  <bb 4> :
  # a_1 = PHI <0(2), a_12(3)>
  # b_2 = PHI <1(2), b_11(3)>
  # i_3 = PHI <1(2), i_13(3)>
  if (i_3 < n_7(D))
    goto <bb 3>; [INV]
  else
    goto <bb 5>; [INV]

  <bb 5> :
  return 0;

}


