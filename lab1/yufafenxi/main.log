*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@n = dso_local constant i32 20, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@n = dso_local constant i32 20, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

; Loop:
7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

; Exit blocks
19:                                               ; preds = %7
  ret i32 0
*** IR Dump After Loop Strength Reduction ***
; Preheader:
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

; Loop:
7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

; Exit blocks
19:                                               ; preds = %7
  ret i32 0
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@n = dso_local constant i32 20, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@n = dso_local constant i32 20, align 4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}

attributes #0 = { noinline nounwind uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  store i32 0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  store i32 1, i32* %4, align 4
  br label %7

7:                                                ; preds = %11, %0
  %8 = load i32, i32* %4, align 4
  %9 = load i32, i32* %6, align 4
  %10 = icmp slt i32 %8, %9
  br i1 %10, label %11, label %19

11:                                               ; preds = %7
  %12 = load i32, i32* %3, align 4
  store i32 %12, i32* %5, align 4
  %13 = load i32, i32* %2, align 4
  %14 = load i32, i32* %3, align 4
  %15 = add nsw i32 %13, %14
  store i32 %15, i32* %3, align 4
  %16 = load i32, i32* %5, align 4
  store i32 %16, i32* %2, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %17, 1
  store i32 %18, i32* %4, align 4
  br label %7

19:                                               ; preds = %7
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
224B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
240B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
256B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
272B	  JMP_1 %bb.1

288B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

304B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
320B	  $eax = COPY %2:gr32
336B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
224B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
240B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
256B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
272B	  JMP_1 %bb.1

288B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

304B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
320B	  $eax = COPY %2:gr32
336B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  %1:gr32 = SUB32rm %0:gr32(tied-def 0), %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY %2:gr32
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %4:gr32 = nsw ADD32rm %3:gr32(tied-def 0), %stack.1, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (dereferenceable load 4 from %ir.2)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  %4:gr32 = COPY killed %5:gr32
  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  %4:gr32 = COPY killed %5:gr32
  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  %2:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %2:gr32
  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
224B	  %4:gr32 = COPY killed %5:gr32
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

336B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
352B	  $eax = COPY killed %2:gr32
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
224B	  %4:gr32 = COPY killed %5:gr32
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

336B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
352B	  $eax = COPY killed %2:gr32
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
224B	  %4:gr32 = COPY %5:gr32
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

336B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
352B	  $eax = COPY %2:gr32
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %5:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
224B	  %4:gr32 = COPY %5:gr32
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

336B	  %2:gr32 = MOV32r0 implicit-def dead $eflags
352B	  $eax = COPY %2:gr32
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  %0:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm %0:gr32, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  %3:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.5)
208B	  %4:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  %4:gr32 = ADD32rr %4:gr32(tied-def 0), %3:gr32, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %4:gr32 :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %3:gr32 :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
208B	  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
208B	  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
208B	  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
48B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
64B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

80B	bb.1 (%ir-block.7):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

96B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
112B	  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
128B	  JCC_1 %bb.3, 13, implicit killed $eflags
144B	  JMP_1 %bb.2

160B	bb.2 (%ir-block.11):
	; predecessors: %bb.1
	  successors: %bb.1(0x80000000); %bb.1(100.00%)

176B	  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
192B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
208B	  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
240B	  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
256B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
272B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
288B	  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
304B	  JMP_1 %bb.1

320B	bb.3 (%ir-block.19):
	; predecessors: %bb.1

352B	  $eax = MOV32r0 implicit-def dead $eflags
368B	  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
  fi#5: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, %stack.5, 1, $noreg, 0, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 %stack.3, 1, $noreg, 0, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags
  JMP_1 %bb.2

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = MOV32r0 implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RET 0, $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-32]
  fi#1: size=4, align=4, at location [SP-20]
  fi#2: size=4, align=4, at location [SP-16]
  fi#3: size=4, align=4, at location [SP-12]
  fi#4: size=4, align=4, at location [SP-28]
  fi#5: size=4, align=4, at location [SP-24]

bb.0 (%ir-block.0):
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  MOV32mi $rbp, 1, $noreg, -24, $noreg, 0 :: (store 4 into %ir.1)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.4)

bb.1 (%ir-block.7, align 4):
; predecessors: %bb.0, %bb.2
  successors: %bb.2(0x7c000000), %bb.3(0x04000000); %bb.2(96.88%), %bb.3(3.12%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (dereferenceable load 4 from %ir.4)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -16, $noreg, implicit-def $eflags :: (dereferenceable load 4 from %ir.6)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.11):
; predecessors: %bb.1
  successors: %bb.1(0x80000000); %bb.1(100.00%)

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (dereferenceable load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -20, $noreg, renamable $eax :: (store 4 into %ir.5)
  renamable $ecx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (dereferenceable load 4 from %ir.2)
  renamable $ecx = ADD32rr killed renamable $ecx(tied-def 0), renamable $eax, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $ecx :: (store 4 into %ir.3)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.2)
  ADD32mi8 $rbp, 1, $noreg, -4, $noreg, 1, implicit-def dead $eflags :: (store 4 into %ir.4), (dereferenceable load 4 from %ir.4)
  JMP_1 %bb.1

bb.3 (%ir-block.19):
; predecessors: %bb.1

  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ $eax

# End machine code for function main.

