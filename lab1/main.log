*** IR Dump Before Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 100, align 4
@x = dso_local global i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Pre-ISel Intrinsic Lowering ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 100, align 4
@x = dso_local global i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Loop Strength Reduction ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

; Loop:
10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

; Exit blocks
24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
*** IR Dump After Loop Strength Reduction ***
; Preheader:
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

; Loop:
10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

; Exit blocks
24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Expand Atomic instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Canonicalize natural loops ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Merge contiguous icmps into a memcmp ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Expand memcmp() to load/stores ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Lower Garbage Collection Instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Shadow Stack GC Lowering ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Lower constant intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Remove unreachable blocks from the CFG ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Constant Hoisting ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Partially inline calls to library functions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Instrument function entry/exit with calls to e.g. mcount() (post inlining) ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Scalarize Masked Memory Intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Expand reduction intrinsics ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Interleaved Access Pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Expand indirectbr instructions ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After CodeGen Prepare ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 100, align 4
@x = dso_local global i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump After Rewrite Symbols ***
; ModuleID = 'main.ll'
source_filename = "main.c"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

@N = dso_local constant i32 100, align 4
@x = dso_local global i32 2, align 4
@.str = private unnamed_addr constant [4 x i8] c"%d\0A\00", align 1
@.str.1 = private unnamed_addr constant [5 x i8] c"%d%d\00", align 1
@.str.2 = private unnamed_addr constant [3 x i8] c"%d\00", align 1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #1

; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}

; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}

attributes #0 = { noinline nounwind optnone uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }

!llvm.module.flags = !{!0}
!llvm.ident = !{!1}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{!"clang version 10.0.0-4ubuntu1 "}
*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_a(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 1, i32* %3, align 4
  %4 = load i32, i32* %3, align 4
  %5 = add nsw i32 %4, 1
  %6 = load i32, i32* %2, align 4
  %7 = add nsw i32 %5, %6
  %8 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %7)
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_a: IsSSA, TracksLiveness

# End machine code for function func_a.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
112B	  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  %2:gr64 = MOV64ri @.str
160B	  $rdi = COPY %2:gr64
176B	  $esi = COPY %7:gr32
192B	  $al = MOV8ri 0
208B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %4:gr32 = COPY $eax
256B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
112B	  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
128B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
144B	  %2:gr64 = MOV64ri @.str
160B	  $rdi = COPY %2:gr64
176B	  $esi = COPY %7:gr32
192B	  $al = MOV8ri 0
208B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %4:gr32 = COPY $eax
256B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine code sinking ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = COPY $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function func_a: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = ADD32ri8 killed %10:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = ADD32rm killed %9:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = COPY killed %10:gr32
  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = COPY killed %9:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %9:gr32 = COPY killed %10:gr32
  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
  %7:gr32 = COPY killed %9:gr32
  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %4:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_a.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = COPY killed %10:gr32
112B	  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
128B	  %7:gr32 = COPY killed %9:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY killed %2:gr64
208B	  $esi = COPY killed %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = COPY killed %10:gr32
112B	  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
128B	  %7:gr32 = COPY killed %9:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY killed %2:gr64
208B	  $esi = COPY killed %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = COPY %10:gr32
112B	  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
128B	  %7:gr32 = COPY %9:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %10:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
96B	  %9:gr32 = COPY %10:gr32
112B	  %9:gr32 = ADD32ri8 %9:gr32(tied-def 0), 1, implicit-def dead $eflags
128B	  %7:gr32 = COPY %9:gr32
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY killed $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function func_a: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  %7:gr32 = ADD32ri8 %7:gr32(tied-def 0), 1, implicit-def dead $eflags
144B	  %7:gr32 = ADD32rm %7:gr32(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr64 = MOV64ri @.str
192B	  $rdi = COPY %2:gr64
208B	  $esi = COPY %7:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %4:gr32 = COPY $eax
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
144B	  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $rdi = MOV64ri @.str
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
144B	  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $rdi = MOV64ri @.str
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
144B	  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $rdi = MOV64ri @.str
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
80B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
112B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
144B	  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  renamable $rdi = MOV64ri @.str
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
288B	  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), %stack.0, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_a.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Tail Duplication ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_a: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-16]
  fi#1: size=4, align=4, at location [SP-12]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 1 :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32rm killed renamable $esi(tied-def 0), $rbp, 1, $noreg, -8, $noreg, implicit-def dead $eflags :: (load 4 from %ir.2)
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_a.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local void @func_b() #0 {
  %1 = load i32, i32* @x, align 4
  %2 = add nsw i32 %1, 1
  %3 = add nsw i32 %2, 100
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str, i64 0, i64 0), i32 %3)
  ret void
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_b: IsSSA, TracksLiveness

# End machine code for function func_b.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_b: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
48B	  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  %0:gr64 = MOV64ri @.str
96B	  $rdi = COPY %0:gr64
112B	  $esi = COPY %4:gr32
128B	  $al = MOV8ri 0
144B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr32 = COPY $eax
192B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function func_b: IsSSA, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
48B	  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
64B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
80B	  %0:gr64 = MOV64ri @.str
96B	  $rdi = COPY %0:gr64
112B	  $esi = COPY %4:gr32
128B	  $al = MOV8ri 0
144B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
160B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %2:gr32 = COPY $eax
192B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine code sinking ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY %0:gr64
  $esi = COPY %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr32 = COPY $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function func_b: IsSSA, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = ADD32ri8 killed %7:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = ADD32ri8 killed %6:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = COPY killed %7:gr32
  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = COPY killed %6:gr32
  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

bb.0 (%ir-block.0):
  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  %6:gr32 = COPY killed %7:gr32
  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
  %4:gr32 = COPY killed %6:gr32
  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %0:gr64 = MOV64ri @.str
  $rdi = COPY killed %0:gr64
  $esi = COPY killed %4:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %2:gr32 = COPY killed $eax
  RETQ

# End machine code for function func_b.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = COPY killed %7:gr32
48B	  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
64B	  %4:gr32 = COPY killed %6:gr32
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY killed %0:gr64
144B	  $esi = COPY killed %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = COPY killed %7:gr32
48B	  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
64B	  %4:gr32 = COPY killed %6:gr32
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY killed %0:gr64
144B	  $esi = COPY killed %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = COPY %7:gr32
48B	  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
64B	  %4:gr32 = COPY %6:gr32
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %7:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
32B	  %6:gr32 = COPY %7:gr32
48B	  %6:gr32 = ADD32ri8 %6:gr32(tied-def 0), 1, implicit-def dead $eflags
64B	  %4:gr32 = COPY %6:gr32
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY killed $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function func_b: NoPHIs, TracksLiveness

0B	bb.0 (%ir-block.0):
16B	  %4:gr32 = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 1, implicit-def dead $eflags
80B	  %4:gr32 = ADD32ri8 %4:gr32(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  %0:gr64 = MOV64ri @.str
128B	  $rdi = COPY %0:gr64
144B	  $esi = COPY %4:gr32
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
208B	  dead %2:gr32 = COPY $eax
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

0B	bb.0 (%ir-block.0):
16B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
80B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rdi = MOV64ri @.str
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

0B	bb.0 (%ir-block.0):
16B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
80B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rdi = MOV64ri @.str
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

0B	bb.0 (%ir-block.0):
16B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
80B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rdi = MOV64ri @.str
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

0B	bb.0 (%ir-block.0):
16B	  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
48B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
80B	  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
96B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  renamable $rdi = MOV64ri @.str
160B	  $al = MOV8ri 0
176B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
192B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
224B	  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs

bb.0 (%ir-block.0):
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  RETQ

# End machine code for function func_b.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Tail Duplication ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_b: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  renamable $esi = MOV32rm $noreg, 1, $noreg, @x, $noreg :: (load 4 from @x)
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 1, implicit-def dead $eflags
  renamable $esi = ADD32ri8 killed renamable $esi(tied-def 0), 100, implicit-def dead $eflags
  renamable $rdi = MOV64ri @.str
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ

# End machine code for function func_b.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @func_c(i32 %0) #0 {
  %2 = alloca i32, align 4
  %3 = alloca i32, align 4
  %4 = alloca i32, align 4
  %5 = alloca i32, align 4
  %6 = alloca i32, align 4
  store i32 %0, i32* %2, align 4
  store i32 0, i32* %3, align 4
  store i32 0, i32* %4, align 4
  store i32 1, i32* %5, align 4
  %7 = load i32, i32* %3, align 4
  %8 = load i32, i32* %4, align 4
  %9 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1, i64 0, i64 0), i32 %7, i32 %8)
  br label %10

10:                                               ; preds = %14, %1
  %11 = load i32, i32* %5, align 4
  %12 = load i32, i32* %2, align 4
  %13 = icmp slt i32 %11, %12
  br i1 %13, label %14, label %24

14:                                               ; preds = %10
  %15 = load i32, i32* %3, align 4
  store i32 %15, i32* %6, align 4
  %16 = load i32, i32* %3, align 4
  %17 = load i32, i32* %4, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %3, align 4
  %19 = load i32, i32* %3, align 4
  %20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %19)
  %21 = load i32, i32* %6, align 4
  store i32 %21, i32* %4, align 4
  %22 = load i32, i32* %5, align 4
  %23 = add nsw i32 %22, 1
  store i32 %23, i32* %5, align 4
  br label %10

24:                                               ; preds = %10
  %25 = load i32, i32* %3, align 4
  ret i32 %25
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_c: IsSSA, TracksLiveness

# End machine code for function func_c.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %5:gr32 = COPY $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
432B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
448B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %19:gr64 = MOV64ri @.str.2
496B	  $rdi = COPY %19:gr64
512B	  $esi = COPY %22:gr32
528B	  $al = MOV8ri 0
544B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  %21:gr32 = COPY $eax
592B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
608B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
624B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
640B	  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
656B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
672B	  JMP_1 %bb.1

688B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

704B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
720B	  $eax = COPY %12:gr32
736B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %5:gr32 = COPY $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
432B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
448B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
464B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
480B	  %19:gr64 = MOV64ri @.str.2
496B	  $rdi = COPY %19:gr64
512B	  $esi = COPY %22:gr32
528B	  $al = MOV8ri 0
544B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
560B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
576B	  %21:gr32 = COPY $eax
592B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
608B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
624B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
640B	  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
656B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
672B	  JMP_1 %bb.1

688B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

704B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
720B	  $eax = COPY %12:gr32
736B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine code sinking ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY %2:gr64
  $esi = COPY %7:gr32
  $edx = COPY %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY %19:gr64
  $esi = COPY %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %21:gr32 = COPY $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY %12:gr32
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function func_c: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = ADD32rm killed %27:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = ADD32ri8 killed %16:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = COPY killed %27:gr32
  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = COPY killed %16:gr32
  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  %0:gr32 = COPY killed $edi
  %1:gr32 = COPY killed %0:gr32
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %2:gr64 = MOV64ri @.str.1
  $rdi = COPY killed %2:gr64
  $esi = COPY killed %7:gr32
  $edx = COPY killed %6:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %5:gr32 = COPY killed $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  %26:gr32 = COPY killed %27:gr32
  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %19:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %19:gr64
  $esi = COPY killed %22:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %21:gr32 = COPY killed $eax
  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  %15:gr32 = COPY killed %16:gr32
  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  $eax = COPY killed %12:gr32
  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Slot index numbering ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY killed %2:gr64
192B	  $esi = COPY killed %7:gr32
208B	  $edx = COPY killed %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = COPY killed %27:gr32
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY killed %19:gr64
528B	  $esi = COPY killed %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
640B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
656B	  %15:gr32 = COPY killed %16:gr32
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY killed %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY killed $edi
32B	  %1:gr32 = COPY killed %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY killed %2:gr64
192B	  $esi = COPY killed %7:gr32
208B	  $edx = COPY killed %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = COPY killed %27:gr32
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY killed %19:gr64
528B	  $esi = COPY killed %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed %18:gr32 :: (store 4 into %ir.4)
640B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
656B	  %15:gr32 = COPY killed %16:gr32
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY killed %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = COPY %27:gr32
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
656B	  %15:gr32 = COPY %16:gr32
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %0:gr32 = COPY $edi
32B	  %1:gr32 = COPY %0:gr32
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %27:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
416B	  %26:gr32 = COPY %27:gr32
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %16:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
656B	  %15:gr32 = COPY %16:gr32
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit killed $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY killed $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit $rdi, implicit killed $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY killed $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit killed $eax

# End machine code for function func_c.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function func_c: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi in %0

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
16B	  %1:gr32 = COPY $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, %1:gr32 :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  %7:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  %6:gr32 = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  %2:gr64 = MOV64ri @.str.1
176B	  $rdi = COPY %2:gr64
192B	  $esi = COPY %7:gr32
208B	  $edx = COPY %6:gr32
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  dead %5:gr32 = COPY $eax

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  %10:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm %10:gr32, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  %29:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, %29:gr32 :: (store 4 into %ir.6)
400B	  %26:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  %26:gr32 = ADD32rm %26:gr32(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, %26:gr32 :: (store 4 into %ir.3)
464B	  %22:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  %19:gr64 = MOV64ri @.str.2
512B	  $rdi = COPY %19:gr64
528B	  $esi = COPY %22:gr32
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
592B	  dead %21:gr32 = COPY $eax
608B	  %18:gr32 = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, %18:gr32 :: (store 4 into %ir.4)
640B	  %15:gr32 = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  %15:gr32 = ADD32ri8 %15:gr32(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, %15:gr32 :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  %12:gr32 = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
752B	  $eax = COPY %12:gr32
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
400B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  renamable $rdi = MOV64ri @.str.2
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
640B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
400B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  renamable $rdi = MOV64ri @.str.2
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
640B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
400B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  renamable $rdi = MOV64ri @.str.2
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
640B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

0B	bb.0 (%ir-block.1):
	  successors: %bb.1
	  liveins: $edi
48B	  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
64B	  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
80B	  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
96B	  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
112B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
128B	  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
144B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  renamable $rdi = MOV64ri @.str.1
224B	  $al = MOV8ri 0
240B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
256B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

288B	bb.1 (%ir-block.10):
	; predecessors: %bb.0, %bb.2
	  successors: %bb.3, %bb.2

304B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
320B	  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
336B	  JCC_1 %bb.3, 13, implicit killed $eflags

352B	bb.2 (%ir-block.14):
	; predecessors: %bb.1
	  successors: %bb.1

368B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
384B	  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
400B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
432B	  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
448B	  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
464B	  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
480B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
496B	  renamable $rdi = MOV64ri @.str.2
544B	  $al = MOV8ri 0
560B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
576B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
608B	  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
624B	  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
640B	  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
672B	  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
688B	  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
704B	  JMP_1 %bb.1

720B	bb.3 (%ir-block.24):
	; predecessors: %bb.1

736B	  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
768B	  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]
  fi#1: size=4, align=4, at location [SP+8]
  fi#2: size=4, align=4, at location [SP+8]
  fi#3: size=4, align=4, at location [SP+8]
  fi#4: size=4, align=4, at location [SP+8]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  MOV32mr %stack.0, 1, $noreg, 0, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi %stack.1, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi %stack.2, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi %stack.3, 1, $noreg, 0, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm %stack.2, 1, $noreg, 0, $noreg :: (load 4 from %ir.4)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, %stack.0, 1, $noreg, 0, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  MOV32mr %stack.4, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), %stack.2, 1, $noreg, 0, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr %stack.1, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $eax = MOV32rm %stack.4, 1, $noreg, 0, $noreg :: (load 4 from %ir.6)
  MOV32mr %stack.2, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm %stack.3, 1, $noreg, 0, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr %stack.3, 1, $noreg, 0, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm %stack.1, 1, $noreg, 0, $noreg :: (load 4 from %ir.3)
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Tail Duplication ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function func_c: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-28]
  fi#1: size=4, align=4, at location [SP-12]
  fi#2: size=4, align=4, at location [SP-20]
  fi#3: size=4, align=4, at location [SP-16]
  fi#4: size=4, align=4, at location [SP-24]
Function Live Ins: $edi

bb.0 (%ir-block.1):
  successors: %bb.1
  liveins: $edi
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -20, $noreg, killed renamable $edi :: (store 4 into %ir.2)
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.3)
  MOV32mi $rbp, 1, $noreg, -12, $noreg, 0 :: (store 4 into %ir.4)
  MOV32mi $rbp, 1, $noreg, -8, $noreg, 1 :: (store 4 into %ir.5)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $edx = MOV32rm $rbp, 1, $noreg, -12, $noreg :: (load 4 from %ir.4)
  renamable $rdi = MOV64ri @.str.1
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit $edx, implicit-def $eax

bb.1 (%ir-block.10):
; predecessors: %bb.0, %bb.2
  successors: %bb.3, %bb.2

  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  CMP32rm killed renamable $eax, $rbp, 1, $noreg, -20, $noreg, implicit-def $eflags :: (load 4 from %ir.2)
  JCC_1 %bb.3, 13, implicit killed $eflags

bb.2 (%ir-block.14):
; predecessors: %bb.1
  successors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  MOV32mr $rbp, 1, $noreg, -16, $noreg, killed renamable $eax :: (store 4 into %ir.6)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $eax = ADD32rm killed renamable $eax(tied-def 0), $rbp, 1, $noreg, -12, $noreg, implicit-def dead $eflags :: (load 4 from %ir.4)
  MOV32mr $rbp, 1, $noreg, -4, $noreg, killed renamable $eax :: (store 4 into %ir.3)
  renamable $esi = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  renamable $rdi = MOV64ri @.str.2
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  renamable $eax = MOV32rm $rbp, 1, $noreg, -16, $noreg :: (load 4 from %ir.6)
  MOV32mr $rbp, 1, $noreg, -12, $noreg, killed renamable $eax :: (store 4 into %ir.4)
  renamable $eax = MOV32rm $rbp, 1, $noreg, -8, $noreg :: (load 4 from %ir.5)
  renamable $eax = ADD32ri8 killed renamable $eax(tied-def 0), 1, implicit-def dead $eflags
  MOV32mr $rbp, 1, $noreg, -8, $noreg, killed renamable $eax :: (store 4 into %ir.5)
  JMP_1 %bb.1

bb.3 (%ir-block.24):
; predecessors: %bb.1

  renamable $eax = MOV32rm $rbp, 1, $noreg, -4, $noreg :: (load 4 from %ir.3)
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 32, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function func_c.

*** IR Dump Before Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Exception handling preparation ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Safe Stack instrumentation pass ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump Before Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
*** IR Dump After Module Verifier ***
; Function Attrs: noinline nounwind optnone uwtable
define dso_local i32 @main() #0 {
  %1 = alloca i32, align 4
  store i32 0, i32* %1, align 4
  call void @func_a(i32 10)
  call void @func_b()
  %2 = call i32 @func_c(i32 20)
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2, i64 0, i64 0), i32 %2)
  ret i32 0
}
# *** IR Dump Before X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness

# End machine code for function main.

# *** IR Dump After X86 DAG->DAG Instruction Selection ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Finalize ISel and expand pseudo-instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Domain Reassignment Pass ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Tail Duplication ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Optimize machine instruction PHIs ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  %3:gr32 = COPY $eax
384B	  %0:gr32 = MOV32r0 implicit-def $eflags
400B	  $eax = COPY %0:gr32
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  %3:gr32 = COPY $eax
384B	  %0:gr32 = MOV32r0 implicit-def $eflags
400B	  $eax = COPY %0:gr32
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Merge disjoint stack slots ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Local Stack Slot Allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early If-Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine InstCombiner ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 cmov Conversion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Early Machine Loop Invariant Code Motion ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Common Subexpression Elimination ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine code sinking ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Peephole Optimizations ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove dead machine instructions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Range Shrink ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Optimize ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Optimize Call Frame ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Avoid Store Forwarding Blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 speculative load hardening ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 EFLAGS copy lowering ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Detect Dead Lanes ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Process Implicit Definitions ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Remove unreachable machine basic blocks ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY %1:gr64
  $esi = COPY %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %3:gr32 = COPY $eax
  %0:gr32 = MOV32r0 implicit-def $eflags
  $eax = COPY %0:gr32
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live Variable Analysis ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Eliminate PHI nodes for register allocation ***:
# Machine code for function main: IsSSA, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Eliminate PHI nodes for register allocation ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Two-Address instruction pass ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %6:gr32 = MOV32ri 10
  $edi = COPY killed %6:gr32
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %4:gr32 = MOV32ri 20
  $edi = COPY killed %4:gr32
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %5:gr32 = COPY killed $eax
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  %1:gr64 = MOV64ri @.str.2
  $rdi = COPY killed %1:gr64
  $esi = COPY killed %5:gr32
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  dead %3:gr32 = COPY killed $eax
  %0:gr32 = MOV32r0 implicit-def dead $eflags
  $eax = COPY killed %0:gr32
  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Slot index numbering ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY killed %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY killed %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY killed %1:gr64
304B	  $esi = COPY killed %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY killed %0:gr32
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY killed %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY killed %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY killed %1:gr64
304B	  $esi = COPY killed %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY killed %0:gr32
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Interval Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY %0:gr32
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
48B	  %6:gr32 = MOV32ri 10
64B	  $edi = COPY %6:gr32
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
176B	  %4:gr32 = MOV32ri 20
192B	  $edi = COPY %4:gr32
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
384B	  %0:gr32 = MOV32r0 implicit-def dead $eflags
400B	  $eax = COPY %0:gr32
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Simple Register Coalescing ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Rename Disconnected Subregister Components ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Machine Instruction Scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Debug Variable Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Stack Slot Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Map ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Live Register Matrix ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump Before Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY killed $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit killed $al, implicit killed $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY killed $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit killed $eax

# End machine code for function main.

# *** IR Dump After Greedy Register Allocator ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
240B	  %5:gr32 = COPY $eax
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  %1:gr64 = MOV64ri @.str.2
288B	  $rdi = COPY %1:gr64
304B	  $esi = COPY %5:gr32
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
368B	  dead %3:gr32 = COPY $eax
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Virtual Register Rewriter ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  renamable $rdi = MOV64ri @.str.2
304B	  $esi = COPY killed renamable $eax
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  renamable $rdi = MOV64ri @.str.2
304B	  $esi = COPY killed renamable $eax
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Stack Slot Coloring ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  renamable $rdi = MOV64ri @.str.2
304B	  $esi = COPY killed renamable $eax
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

0B	bb.0 (%ir-block.0):
16B	  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
32B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
64B	  $edi = MOV32ri 10
80B	  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
96B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
112B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
128B	  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
144B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
160B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
192B	  $edi = MOV32ri 20
208B	  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
224B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
256B	  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
272B	  renamable $rdi = MOV64ri @.str.2
304B	  $esi = COPY killed renamable $eax
320B	  $al = MOV8ri 0
336B	  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
352B	  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
400B	  $eax = MOV32r0 implicit-def dead $eflags
416B	  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Loop Invariant Code Motion ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 FP Stackifier ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After PostRA Machine Sink ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Shrink Wrapping analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#0: size=4, align=4, at location [SP+8]

bb.0 (%ir-block.0):
  MOV32mi %stack.0, 1, $noreg, 0, $noreg, 0 :: (store 4 into %ir.1)
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  ADJCALLSTACKDOWN64 0, 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  ADJCALLSTACKUP64 0, 0, implicit-def $rsp, implicit-def dead $eflags, implicit-def $ssp, implicit $rsp, implicit $ssp
  $eax = MOV32r0 implicit-def dead $eflags
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Prologue/Epilogue Insertion & Frame Finalization ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Control Flow Optimizer ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Tail Duplication ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Machine Copy Propagation Pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = COPY killed renamable $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = MOV32r0 implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post-RA pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 pseudo instruction expansion pass ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Post RA top-down list latency scheduler ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Analyze Machine Code For Garbage Collection ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Branch Probability Basic Block Placement ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert fentry calls ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Insert XRay ops ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Implement the 'patchable-function' attribute ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Execution Dependency Fix ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After BreakFalseDeps ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 Byte/Word Instruction Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After X86 LEA Fixup ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Compressing EVEX instrs to VEX encoding when possible ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Contiguously Lay Out Funclets ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After StackMap Liveness Analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Live DEBUG_VALUE analysis ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump Before Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

# *** IR Dump After Check CFA info and insert CFI instructions if needed ***:
# Machine code for function main: NoPHIs, TracksLiveness, NoVRegs
Frame Objects:
  fi#-1: size=8, align=16, fixed, at location [SP-8]
  fi#0: size=4, align=4, at location [SP-12]

bb.0 (%ir-block.0):
  frame-setup PUSH64r killed $rbp, implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa_offset 16
  CFI_INSTRUCTION offset $rbp, -16
  $rbp = frame-setup MOV64rr $rsp
  CFI_INSTRUCTION def_cfa_register $rbp
  $rsp = frame-setup SUB64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  MOV32mi $rbp, 1, $noreg, -4, $noreg, 0 :: (store 4 into %ir.1)
  $edi = MOV32ri 10
  CALL64pcrel32 @func_a, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi
  CALL64pcrel32 @func_b, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp
  $edi = MOV32ri 20
  CALL64pcrel32 @func_c, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $edi, implicit-def $eax
  renamable $rdi = MOV64ri @.str.2
  $esi = MOV32rr killed $eax
  $al = MOV8ri 0
  CALL64pcrel32 @printf, <regmask $bh $bl $bp $bph $bpl $bx $ebp $ebx $hbp $hbx $rbp $rbx $r12 $r13 $r14 $r15 $r12b $r13b $r14b $r15b $r12bh $r13bh $r14bh $r15bh $r12d $r13d $r14d $r15d $r12w $r13w $r14w $r15w $r12wh and 3 more...>, implicit $rsp, implicit $ssp, implicit $al, implicit $rdi, implicit killed $esi, implicit-def $eax
  $eax = XOR32rr undef $eax(tied-def 0), undef $eax, implicit-def dead $eflags
  $rsp = frame-destroy ADD64ri8 $rsp(tied-def 0), 16, implicit-def dead $eflags
  $rbp = frame-destroy POP64r implicit-def $rsp, implicit $rsp
  CFI_INSTRUCTION def_cfa $rsp, 8
  RETQ implicit $eax

# End machine code for function main.

